# Chunk 51
# First model
m0 <- glm(target ~ 1, family="binomial", data=df)
ptt <- prop.table(table(df$target))
summary(m0)
oddm0 <- ptt[2] / (1- ptt[2])
log(oddm0)
# Chunk 52
m1 <- glm(target ~ . , family="binomial", data=df[, c(3, 13, 14)])
m11<- step(m1) #city_development_index + training_hours
m11 <- step(m1, k=log(nrow(df))) #BIC case   city_development_index
# Chunk 53
marginalModelPlot(m11) #some transformation needed
m12 <- glm(target ~ poly(city_development_index,2), family="binomial", data=df)
m13 <- glm(target ~ log(city_development_index), family="binomial", data=df)
#AIC(m11, m12, m13)
par(mfrow = c(1, 2))
marginalModelPlot(m12)
marginalModelPlot(m13) #better fit
influencePlot(m13)
cook <- Boxplot(cooks.distance(m13))
cookd <- sort(cooks.distance(m13)[cook], decreasing=TRUE)
cookd #10 influent observations
df <- df[!(rownames(df) %in% names(cookd)),]
m131 <- glm(target ~ log(city_development_index), family="binomial", data=df)
AIC(m13, m131)
#summary(m13)
#summary(m131)
marginalModelPlots(m131)
residualPlots(m131) #some values of the tail in m13 are removed
#plot(allEffects((m131)))
# Temporarily remove outliers: compare models
#dfcheck <-df
#ll <- which(df$enrollee_id %in% regmout_th)
#dfcheck <- dfcheck[-ll,]
#ll <- which(df$enrollee_id %in% regeout_th)
#df <- df[-ll, ]
#ll <- which(df$enrollee_id %in% regmout_city)
#dfcheck <- dfcheck[-ll, ]
#m14 <- glm(target ~ log(city_development_index) + training_hours, family="binomial", data=dfcheck)
#AIC(m14, m13)
# Chunk 54
m00 <-glm(target ~ 1, family="binomial", data=df)
summary(m00)
m2 <- glm(target ~ ., family="binomial", data=df[, c(2, 4:12, 14)])
AIC(m2);BIC(m2)
# AIC option
m21<-step(m2, trace=0)
m21$anova
summary(m21)
#BIC option
m211<-step(m2, k=log(nrow(df)), trace=0)
m211$anova
# Chunk 55
summary(m211)
#vif(m211)
#Anova(m21, test="LR")
#Anova(m211, test="LR")
#AIC(m00, m211)
plot(allEffects(m211), axes=list(y=list(lab="target")))
# Chunk 56
check <- as.numeric(df$target) - 1
# enrolled_university - major_discipline
#with(df, interaction.plot(enrolled_university, major_discipline, check, lwd = 2, col = 1:2))
m22 <- glm(target ~ enrolled_university + major_discipline, family="binomial", data=df)
m23 <- glm(target ~ enrolled_university * major_discipline, family="binomial", data=df)
Anova(m23, test="LR") #No interaction
# enrolled_university - company_size
with(df, interaction.plot(enrolled_university, company_size, check, lwd = 2, col = 1:9))
m22 <- glm(target ~ enrolled_university + company_size, family="binomial", data=df)
m23 <- glm(target ~ enrolled_university * company_size, family="binomial", data=df)
Anova(m23, test="LR") #No interaction, not clear...
prop.table(table(df$enrolled_university, df$company_size), 2)
table(df$company_size)
df$company_size_col <- fct_collapse(df$company_size, "<1000"= c("<10", "10-49", "50-99", "100-500", "500-999"), ">1000" = c("1000-4999", "5000-9999", "10000+"))
table(df$company_size_col)
with(df, interaction.plot(enrolled_university, company_size_col, check, lwd = 2, col = 1:9))
# We try enrolled_university *company_size_col
m24 <- glm(target ~ enrolled_university * company_size_col, family="binomial", data=df)
Anova(m24, test="LR")
AIC(m23, m24)
summary(m23)
summary(m24)
BIC(m23, m24)
BIC(m2)
# major_discipline - company_size
#with(df, interaction.plot(major_discipline, company_size, check, lwd = 2, col = 1:2))
m22 <- glm(target ~ major_discipline + company_size, family="binomial", data=df)
m23 <- glm(target ~ major_discipline * company_size, family="binomial", data=df)
Anova(m23, test="LR") #No interaction
# Chunk 57
m3 <- glm(target ~ log(city_development_index) + enrolled_university + major_discipline + company_size, family="binomial", data=df)
summary(m3)
m31 <- glm(target ~ log(city_development_index) + enrolled_university + major_discipline + company_size_col, family="binomial", data=df)
summary(m31)
m32 <- glm(target ~ log(city_development_index) + enrolled_university * company_size_col + major_discipline, family="binomial", data=df)
summary(m32)
anova(m31, m32, test="Chisq")
BIC(m3, m31, m32)
marginalModelPlot(m31)
residualPlots(m31)
influencePlot(m31)
cook <- Boxplot(cooks.distance(m31))
cookd <- sort(cooks.distance(m31)[cook], decreasing=TRUE)
cookd
df<-df[!(rownames(df) %in% names(cookd)),]
m4 <- glm(target ~ log(city_development_index) + enrolled_university + major_discipline + company_size_col, family="binomial", data=df)
100*(1-m4$dev/m4$null.dev)
m4$dev
m4$null.dev
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
rm(list=ls())
setwd("C:/Users/Alex/Desktop/UPC/1st Semester/Statistical Inference and Modelling/SIM_Assignment2")
options(contrasts=c("contr.treatment","contr.treatment"))
#setwd("~/Desktop/SIM/Assignment2")
# Chunk 3
df <- read.csv("aug_train.csv",header=T, sep=",", na.strings="NA")
summary(df)
# Chunk 4
# Introduce required packages:
requiredPackages <- c("car","lmtest", "FactoMineR","car", "factoextra","RColorBrewer","ggplot2","dplyr","knitr", "corrplot", "mvoutlier", "chemometrics", "MASS", "effects", "tidyverse", "ROCR", "rms", "fmsb")
#use this function to check if each package is on the local machine
#if a package is installed, it will be loaded
#if any are not, the missing package(s) will be installed and loaded
package.check <- lapply(requiredPackages, FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
})
#verify they are loaded
# search()
# Chunk 5
df <- unique(df) #No duplicates
#nrow(df) == nrow(unique(df))
set.seed(130798) #Birthday of 1 member of the group as random seed:
samples <- as.vector(sort(sample(1:nrow(df),5000))) #Subset of 5000 observations
df <- df[samples,]
# Chunk 6
sum(is.na(df)) #0
df[df==""] <- NA
sum(is.na(df)) #5433
# Chunk 7
# Column name relevent_experience should be relevant_experience
colnames(df)[5] <- "relevant_experience"
# Also their values should be with the "relevant" word
df$relevant_experience <- gsub("relevent", "relevant", df$relevant_experience)
# Correct the format of the company size
df$company_size[df$company_size == "10/49"] <- "10-49"
# Chunk 8
class(df$city) #"character"
df$city <- factor(df$city) #Transform to "factor"
# Chunk 9
ggplot(df,aes(x = forcats::fct_infreq(city), fill = city)) +
geom_bar(stat = 'count', width = 0.8) +
scale_y_continuous(expand = c(0, 0)) +
scale_fill_discrete(guide = "none") +
coord_flip() + xlab("City") + ylab("Count") +
theme_minimal()
# Chunk 10
class(df$city_development_index) #"numeric"
# Kept as "numeric"
# Chunk 11
ggplot(df, aes(x = city_development_index)) +
geom_boxplot(notch = TRUE) +
theme_minimal()
# Chunk 12
class(df$gender) #"character"
df$gender <- factor(df$gender) #Transform to "factor"
# Chunk 13
ggplot(df,aes(x = gender, fill = gender)) +
geom_bar(stat = 'count', width = 0.8) +
scale_fill_manual(values = c("hotpink", "lightskyblue", "gold"), guide = "none") +
xlab("Gender") + ylab("Count") +
theme_minimal()
# Chunk 14
class(df$relevant_experience) #"character"
df$relevant_experience <- factor(df$relevant_experience,
levels=c("Has relevant experience", "No relevant experience"),
labels = c("Yes", "No")) #Transform to "factor" and change to simpler values
# Chunk 15
ggplot(df,aes(x = relevant_experience, fill = relevant_experience)) +
geom_bar(aes(y = (..count..)/sum(..count..)*100), width = 0.8) +
scale_fill_manual(values = c("green3", "red2"), guide = "none") +
xlab("Relevant experience") + ylab("Percentage (%)") + ylim(c(0, 100)) +
theme_minimal()
# Chunk 16
class(df$enrolled_university) #"character"
df$enrolled_university <- factor(df$enrolled_university,
levels=c("no_enrollment", "Part time course", "Full time course"),
labels= c("No", "Part-Time", "Full-Time")) #Transform to "factor" and change to simpler values
# Chunk 17
ggplot(df,aes(x = enrolled_university, fill = enrolled_university)) +
geom_bar(stat = 'count', width = 0.8) +
scale_fill_manual(values  = c("red3", "steelblue", "darkgreen"), guide = "none") +
xlab("Type of course") + ylab("Count") + theme_minimal()
# Chunk 18
class(df$education_level) #"character"
df$education_level <- factor(df$education_level,
levels = c("Primary School", "High School",
"Graduate", "Masters", "Phd")) #Transform to "factor"
# Chunk 19
ggplot(df,aes(x = education_level, fill = education_level)) +
geom_bar(stat = 'count', width = 0.8) +
scale_fill_discrete(guide = "none") +
xlab("Education level") + ylab("Count") +
theme_minimal()
# Chunk 20
class(df$major_discipline) #"character"
df$major_discipline <-factor(df$major_discipline,
levels=c("STEM", "Business Degree", "Arts",
"Humanities", "No Major", "Other")) #Transform to "factor"
# Chunk 21
ggplot(df,aes(x = major_discipline, fill = major_discipline)) +
geom_bar(stat = 'count', width = 0.8) +
scale_fill_discrete(guide = "none") +
xlab("Education major discipline") + ylab("Count") +
theme_minimal()
# Chunk 22
class(df$experience) #"character"
df$experience <- factor(df$experience) #Transform to "factor"
# Chunk 23
ggplot(df,aes(x = experience, fill = experience)) +
geom_bar(stat = 'count', width = 0.8) +
xlab("Experience") + ylab("Count") +
scale_fill_discrete(guide = "none") +
theme_minimal()
# Chunk 24
class(df$company_size) #"character"
df$company_size <- factor(df$company_size) #Transform to "factor"
# Chunk 25
ggplot(df,aes(x = company_size, fill = company_size)) +
geom_bar(stat = 'count', width = 0.8) +
xlab("Company size") + ylab("Count") +
scale_fill_discrete(guide = "none") +
theme_minimal()
# Chunk 26
class(df$company_type) #"character"
df$company_type <- factor(df$company_type) #Transform to "factor"
# Chunk 27
ggplot(df,aes(x = company_type, fill = company_type)) +
geom_bar(stat = 'count', width = 0.8) +
xlab("Company type") + ylab("Count") +
scale_fill_discrete(guide = "none") +
theme_minimal()
# Chunk 28
class(df$last_new_job) #"character"
df$last_new_job <-factor(df$last_new_job) #Transform to "factor"
# Chunk 29
ggplot(df,aes(x = last_new_job, fill = last_new_job)) +
geom_bar(stat = 'count', width = 0.8) +
xlab("Years passed from previous job") + ylab("Count") +
scale_fill_discrete(guide = "none") +
theme_minimal()
# Chunk 30
class(df$training_hours) #"integer"
#Keep as "integer"
# Chunk 31
ggplot(df,aes(x = training_hours)) +
geom_boxplot(notch = TRUE) +
xlab("Training hours")+
theme_minimal()
# Chunk 32
missing <- unlist(lapply(df, function(x) sum(is.na(x))))/nrow(df)
sort(missing[missing >= 0], decreasing = TRUE)
count_na<-colSums(is.na(df[, 1:14]))
count_na
# Chunk 33
sum(is.na(df)) #5433
# Chunk 34
par(mfrow = c(1,2))
Boxplot(df$city_development_index)
Boxplot(df$training_hours)
# Chunk 35
mout_city = quantile(df$city_development_index)[[2]]-1.5*IQR(df$city_development_index)
sum(df$city_development_index < mout_city) #6
mout_th = quantile(df$training_hours)[[4]]+1.5*IQR(df$training_hours)
eout_th = quantile(df$training_hours)[[4]]+3*IQR(df$training_hours)
sum(df$training_hours > mout_th) #227
sum(df$training_hours > eout_th) #58
# Chunk 36
res.out<-Moutlier(df[,c(3,13)],quantile=0.995)
# Chunk 37
#quantile(res.out$md,seq(0,1,0.005))
multout<-which(res.out$md > res.out$cutoff)
length(multout) #105
# Chunk 38
par(mfrow = c(1, 1))
plot( res.out$md, res.out$rd )
text(res.out$md, res.out$rd, labels=rownames(df),adj=1, cex=0.5)
abline(h=res.out$cutoff, col="red")
abline(v=res.out$cutoff, col="red")
# Chunk 39
df$quality <- 0
# Chunk 40
dqvar <- data.frame(colnames(df[, 1:14]))
dqvar$outliers <-0
dqvar$missing <-0
dqvar$errors <-0
# Outliers
dqvar[13, "outliers"] <- sum(df$training_hours > mout_th) + sum(df$training_hours > eout_th)
dqvar[3, "outliers"] <- sum(df$city_development_index < mout_city)
#Missing
#We add missing values to the column per variable
dqvar$missing <- (colSums(is.na(df[, 1:14])))
dqvar
# Chunk 41
dqind <- data.frame(df$enrollee_id)
colnames(dqind)[1] <- "enrollee_id"
dqind$missing <-0
dqind$outliers <-0
dqind$errors <-0
#Outliers
regmout_th <- subset(df$enrollee_id, df$training_hours > mout_th)
regeout_th <-subset(df$enrollee_id, df$training_hours > eout_th)
regmout_city <-subset(df$enrollee_id, df$city_development_index < mout_city)
for(i in 1:length(regmout_th)) {
s<-which(df$enrollee_id == regmout_th[i])
w<-which(dqind$enrollee_id == regmout_th[i])
df[s, "quality"] <- df[s , "quality"] + 1
dqind[w, "outliers"] <- dqind[w, "outliers"] + 1}
for(i in 1:length(regeout_th)) {   # for-loop over rows
s<-which(df$enrollee_id == regeout_th[i])
w<-which(dqind$enrollee_id == regeout_th[i])
df[s, "quality"] <- df[s , "quality"] + 1
dqind[w, "outliers"] <- dqind[w, "outliers"] + 1}
for(i in 1:length(regmout_city)) {   # for-loop over rows
s<-which(df$enrollee_id == regmout_city[i])
w<-which(dqind$enrollee_id == regmout_city[i])
df[s , "quality"] <- df[s , "quality"] + 1
dqind[w, "outliers"] <- dqind[w, "outliers"] + 1}
df[multout, "quality"] <- df[multout, "quality"] + 1
dqind[multout, "outliers"] <- dqind[multout, "outliers"] + 1
dqind$missing <- rowSums(is.na(df))
df$quality <- df$quality + rowSums(is.na(df))
head(dqind)
# Chunk 42
# Correlation
table(df$quality)
cor(df[, c(3, 13:15)])
res.con <- condes(df, 15)
res.con$quali
res.con$quanti
# Chunk 43
#Create column with na counts for every observation
df$na_count <- rowSums(is.na(df))
# Actualitzem aquí el Data Quality per Missing's
for(i in 1:nrow(df)) {   # for-loop over rows
df[i , "quality"] <- df[i , "quality"] + df[i, "na_count"]
#w <- which(dqind$enrollee_id == df[i, "enrollee_id"])
dqind[i, "missing"] <- df$na_count[i]}
# Chunk 44
ggplot(df, aes(x = na_count, y = (..count..)/sum(..count..)*100)) +
geom_histogram(binwidth = 1, color = "black", fill = "lightblue") +
xlab("Number of NA's") + ylab("Percentage (%)") +
theme_minimal()
# Chunk 45
df <- df[df$na_count < 5,]
nrow(df) #4946
100 - nrow(df)/5000*100 #only removed a 1.08% of the observations
# Chunk 46
summary(df)
df$target <- factor(df$target, levels=c(1, 0), labels=c("Target.Yes", "Target.No"))
table(df$target)
#Gender
levels(df$gender)[length(levels(df$gender)) + 1] <- "Missing"
df[is.na(df$gender), "gender"] <- "Missing"
#Enrolled university
#levels(df$enrolled_university)[length(levels(df$enrolled_university)) + 1] <- "Missing"
#df[is.na(df$enrolled_university), "enrolled_university"] <- "Missing"
#prop.table(table(df$enrolled_university, df$target)) #missMDA
levels(df$enrolled_university)
nrow(df[is.na(df$enrolled_university),]) #66
#Education level
#levels(df$education_level)[length(levels(df$education_level)) + 1] <- "Missing"
#df[is.na(df$education_level), "education_level"] <- "Missing"
#prop.table(table(df$education_level, df$target)) #missMDA
levels(df$education_level)
nrow(df[is.na(df$education_level),]) #75
#Major discipline
levels(df$major_discipline)[length(levels(df$major_discipline)) + 1] <- "Missing"
df[is.na(df$major_discipline), "major_discipline"] <- "Missing"
prop.table(table(df$major_discipline, df$target)) #STEM & other only?
df[df$major_discipline %in% c("Business Degree", "Arts", "Humanities", "No Major"), "major_discipline"] <- "Other"
table(df$major_discipline)
prop.table(table(df$major_discipline, df$target)) #STEM & other only?
df[df$major_discipline == "Missing", "major_discipline"] <- "Other"
table(df$major_discipline)
prop.table(table(df$major_discipline, df$target)) #STEM & other only?
df$major_discipline <- factor(df$major_discipline)
levels(df$major_discipline)
#Experience
#levels(df$experience)[length(levels(df$experience)) + 1] <- "Missing"
#df[is.na(df$experience), "experience"] <- "Missing"
#prop.table(table(df$experience, df$target)) #missMDA
levels(df$experience)
nrow(df[is.na(df$experience),]) #10
#Company size
levels(df$company_size)[length(levels(df$company_size)) + 1] <- "Unknown"
df[is.na(df$company_size), "company_size"] <- "Unknown"
prop.table(table(df$company_size, df$target)) #unknown
#Company type
#levels(df$company_type)[length(levels(df$company_type)) + 1] <- "Missing"
#df[is.na(df$company_type), "company_type"] <- "Missing"
#prop.table(table(df$company_type, df$target)) #assign to other
df[is.na(df$company_type), "company_type"] <- "Other"
#Last new job
#levels(df$last_new_job)[length(levels(df$last_new_job)) + 1] <- "Missing"
#df[is.na(df$last_new_job), "last_new_job"] <- "Missing"
#prop.table(table(df$last_new_job, df$target)) #missMDA
levels(df$last_new_job)
nrow(df[is.na(df$last_new_job),]) #91
# Chunk 48: Profiling
# Check if either training hours or city development index are normally distributed
shapiro.test(df$city_development_index)
shapiro.test(df$training_hours)
# B ~ X where B is the response factor variable and X is the explanatory cont. variable
str(df)
# Test on means
oneway.test(df$city_development_index ~ df$target)
kruskal.test(df$city_development_index ~ df$target)
oneway.test(df$training_hours ~ df$target)
kruskal.test(df$training_hours ~ df$target)
#Test on variances
fligner.test(df$city_development_index ~ df$target)
fligner.test(df$training_hours ~ df$target)
#Catdes
str(df)
res.cat <- catdes(df, 14)
res.cat$test.chi2
res.cat$category
res.cat$quanti.var
res.cat$quanti
# Chunk 49
# We upload the new dataframe with imputation results
df <- read.csv("df_imputation.csv",header=T, sep=",", na.strings="NA")
for(i in 1:ncol(df)){
if(is.character(df[, i])){
df[, i] <-factor(df[, i])
}
}
#summary(df)
df$quality <-NULL
df$na_count <-NULL
# Chunk 50
set.seed(130798)
s <- sample(1:nrow(df),round(0.75*nrow(df),0))
dfall<-df
df <- df[s,]
dftest <-dfall[-s,]
# Chunk 51
# First model
m0 <- glm(target ~ 1, family="binomial", data=df)
ptt <- prop.table(table(df$target))
summary(m0)
oddm0 <- ptt[2] / (1- ptt[2])
log(oddm0)
# Chunk 52
m1 <- glm(target ~ . , family="binomial", data=df[, c(3, 13, 14)])
m11<- step(m1) #city_development_index + training_hours
m11 <- step(m1, k=log(nrow(df))) #BIC case   city_development_index
# Chunk 53
marginalModelPlot(m11) #some transformation needed
m12 <- glm(target ~ poly(city_development_index,2), family="binomial", data=df)
m13 <- glm(target ~ log(city_development_index), family="binomial", data=df)
#AIC(m11, m12, m13)
par(mfrow = c(1, 2))
marginalModelPlot(m12)
marginalModelPlot(m13) #better fit
influencePlot(m13)
cook <- Boxplot(cooks.distance(m13))
cookd <- sort(cooks.distance(m13)[cook], decreasing=TRUE)
cookd #10 influent observations
df <- df[!(rownames(df) %in% names(cookd)),]
m131 <- glm(target ~ log(city_development_index), family="binomial", data=df)
AIC(m13, m131)
#summary(m13)
#summary(m131)
marginalModelPlots(m131)
residualPlots(m131) #some values of the tail in m13 are removed
#plot(allEffects((m131)))
# Temporarily remove outliers: compare models
#dfcheck <-df
#ll <- which(df$enrollee_id %in% regmout_th)
#dfcheck <- dfcheck[-ll,]
#ll <- which(df$enrollee_id %in% regeout_th)
#df <- df[-ll, ]
#ll <- which(df$enrollee_id %in% regmout_city)
#dfcheck <- dfcheck[-ll, ]
#m14 <- glm(target ~ log(city_development_index) + training_hours, family="binomial", data=dfcheck)
#AIC(m14, m13)
# Chunk 54
m00 <-glm(target ~ 1, family="binomial", data=df)
summary(m00)
m2 <- glm(target ~ ., family="binomial", data=df[, c(2, 4:12, 14)])
AIC(m2);BIC(m2)
# AIC option
#m21<-step(m2, trace=0)
#m21$anova
#summary(m21)
#BIC option
m211<-step(m2, k=log(nrow(df)), trace=0)
m211$anova
# Chunk 55
summary(m211)
#vif(m211)
#Anova(m21, test="LR")
#Anova(m211, test="LR")
#AIC(m00, m211)
plot(allEffects(m211), axes=list(y=list(lab="target")))
